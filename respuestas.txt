Ejercicio 1: Verificar la Configuración Global de Git
¿Qué comando debes usar para verificar tu configuración global?
 git config --global --list

¿Cómo puedes configurar tu nombre de usuario y dirección de correo electrónico globalmente?
Con los comandos:
git config --global user.email "email"
git config --global user.name "nombre"


Ejercicio 2: Clonar un Repositorio Remoto
¿Qué comando usas para clonar un repositorio remoto?
git clone <url-repositorio-github>

¿Qué pasa si intentas clonar un repositorio que ya existe en tu máquina?
La consola nos mostrará un error de que en la ruta de destino ya existe ese repositorio.

Ejercicio 3: Crear y Publicar una Rama Remota
¿Qué comando usas para crear una rama local?
git branch <nombre-rama>

¿Cómo subes una rama local al repositorio remoto?
git push origin <nombre-rama>

¿Qué diferencia hay entre una rama local y una rama remota?
Las ramas locales se usan para modificar o avanzar con el código sin tener un impacto en el repositorio remoto, estas
solo podemos verlas nosotros, por el contrario una rama remota es compartida por todos los colaboradores los cuales tienen acceso 
a los cambios realizados en esta.

Ejercicio 4: Resolver Conflictos en Ramas
¿Qué ocurre cuando Git detecta un conflicto durante una fusión?
Nos muestra un error en la terminal diciendo que no es posible la fusión y nos sugiere arreglarlo en el arbol de trabajo y después
usar git add/rm <archivo>.

¿Cómo identificas las secciones conflictivas en un archivo?
Se muestran en el editor de código de la siguiente manera:
<<<<<<< HEAD
Conflicto
=======
Conflicto a
>>>>>>> branch-a



¿Qué pasos sigues para resolver un conflicto y completar la fusión?
En el editor de código se muestran varias opciones a elegir para resolver el conflicto, podemos aceptar los cambios actuales, aceptar el cambio entrante o ambos.


Ejercicio 5: Etiquetar Versiones Importantes
¿Qué comando usas para crear una etiqueta en Git?
git tag <tag-name>
git push origin <tag-nanme> para subir la etiqueta al remoto.

¿Cómo puedes listar todas las etiquetas existentes en tu repositorio?
git tag

¿Por qué es útil utilizar etiquetas en tus proyectos?
Es útil para identificar versiones especificas del código y en casos futuros si es necesario poder volver a ellas fácilmente.
También es útil para tener una mejor organización del código.


Ejercicio 6: Revertir Cambios en un Commit
¿Qué comando usas para revertir un commit en Git?
git revert <hash-commit>

¿Cuál es la diferencia entre revertir un commit y eliminarlo completamente?
La diferencia está en que al revertir un commit no estamos borrando el historial del repositorio, al eliminarlo completamente 
borramos el historial u los cambios realizados posteriormente.

¿Por qué es importante mantener la historia del repositorio intacta?
Para mantener la trazabilidad de los cambios hechos y evitar la perdida de información.


Ejercicio 7: Trabajar con Ramas Origen/Destino
¿Qué significa el parámetro --no-ff en una fusión?


¿Por qué es útil preservar la historia de una rama después de fusionarla?


¿Qué ocurre si omites el parámetro --no-ff?


Ejercicio 8: Actualizar y Sincronizar con el Repositorio Remoto
¿Qué comando usas para verificar si hay actualizaciones disponibles en el repositorio remoto?


¿Cómo descargas las actualizaciones y las fusionas con tu rama local?


¿Qué ocurre si hay conflictos durante la sincronización? ¿Cómo los resuelves?


Ejercicio 9: Usar Alias para Comandos Frecuentes
¿Cómo creas un alias para un comando Git?


¿Qué otros comandos frecuentes podrías simplificar con alias?


¿Cómo puedes hacer que tus alias sean persistentes entre sesiones?


Ejercicio 10: Colaborar en un Proyecto con Pull Requests
¿Qué es un pull request y cuál es su propósito?


¿Cómo creas un pull request en GitHub?


¿Qué pasa si recibes comentarios o sugerencias sobre tus cambios?


